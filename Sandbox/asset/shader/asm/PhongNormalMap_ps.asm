//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer LightCBuf
// {
//
//   float3 lightPos;                   // Offset:    0 Size:    12
//   float3 ambient;                    // Offset:   16 Size:    12
//   float3 diffuseColor;               // Offset:   32 Size:    12
//   float diffuseIntensity;            // Offset:   44 Size:     4
//   float attConst;                    // Offset:   48 Size:     4
//   float attLin;                      // Offset:   52 Size:     4
//   float attQuad;                     // Offset:   56 Size:     4
//
// }
//
// cbuffer ObjectCBuf
// {
//
//   float specularIntensity;           // Offset:    0 Size:     4
//   float specularPower;               // Offset:    4 Size:     4
//   bool normalMapEnabled;             // Offset:    8 Size:     4
//   float padding;                     // Offset:   16 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// splr                              sampler      NA          NA             s0      1 
// tex                               texture  float4          2d             t0      1 
// nmap                              texture  float4          2d             t2      1 
// LightCBuf                         cbuffer      NA          NA            cb0      1 
// ObjectCBuf                        cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// Normal                   0   xyz         1     NONE   float   xyz 
// Tangent                  0   xyz         2     NONE   float   xyz 
// Bitangent                0   xyz         3     NONE   float   xyz 
// Texcoord                 0   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- viewPos.x; v0.y <- viewPos.y; v0.z <- viewPos.z; 
//   v1.x <- n.x; v1.y <- n.y; v1.z <- n.z; 
//   v2.x <- tan.x; v2.y <- tan.y; v2.z <- tan.z; 
//   v3.x <- bitan.x; v3.y <- bitan.y; v3.z <- bitan.z; 
//   v4.x <- tc.x; v4.y <- tc.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 35 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongNormalMap_ps.hlsl"
ine r0.x, l(0, 0, 0, 0), cb1[0].z
if_nz r0.x

#line 38
  dp3 r0.x, v2.xyzx, v2.xyzx
  rsq r0.x, r0.x
  mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- tanToView._m00; r0.y <- tanToView._m01; r0.z <- tanToView._m02
  dp3 r0.w, v3.xyzx, v3.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, v3.xyzx  // r1.x <- tanToView._m10; r1.y <- tanToView._m11; r1.z <- tanToView._m12
  dp3 r0.w, v1.xyzx, v1.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- tanToView._m20; r2.y <- tanToView._m21; r2.z <- tanToView._m22
  mov r3.x, r0.x  // r3.x <- tanToView._m00
  mov r3.y, r1.x  // r3.y <- tanToView._m10
  mov r3.z, r2.x  // r3.z <- tanToView._m20
  mov r4.x, r0.y  // r4.x <- tanToView._m01
  mov r4.y, r1.y  // r4.y <- tanToView._m11
  mov r4.z, r2.y  // r4.z <- tanToView._m21
  mov r2.x, r0.z  // r2.x <- tanToView._m02
  mov r2.y, r1.z  // r2.y <- tanToView._m12

#line 44
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v4.xyxx, t2.xyzw, s0  // r0.x <- normalSample.x; r0.y <- normalSample.y; r0.z <- normalSample.z

#line 45
  mul r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  mov r1.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
  add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- n.x; r0.y <- n.y; r0.z <- n.z

#line 46
  mov r0.w, -r0.y  // r0.w <- n.y

#line 48
  dp3 r1.x, r0.xwzx, r3.xyzx  // r1.x <- n.x
  dp3 r1.y, r0.xwzx, r4.xyzx  // r1.y <- n.y
  dp3 r1.z, r0.xwzx, r2.xyzx  // r1.z <- n.z

#line 49
else 
  mov r1.xyz, v1.xyzx  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z
endif 

#line 51
mov r0.xyz, -v0.xyzx
add r0.xyz, r0.xyzx, cb0[0].xyzx  // r0.x <- vToL.x; r0.y <- vToL.y; r0.z <- vToL.z

#line 52
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w  // r0.w <- distToL

#line 53
div r2.xyz, r0.xyzx, r0.wwww  // r2.x <- dirToL.x; r2.y <- dirToL.y; r2.z <- dirToL.z

#line 55
mul r1.w, r0.w, cb0[3].y
add r1.w, r1.w, cb0[3].x
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, cb0[3].z
add r0.w, r0.w, r1.w
div r0.w, l(1.000000), r0.w  // r0.w <- att

#line 57
mul r3.xyz, cb0[2].wwww, cb0[2].xyzx
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r1.w, r2.xyzx, r1.xyzx
max r1.w, r1.w, l(0.000000)
mul r2.xyz, r1.wwww, r3.xyzx  // r2.x <- diffuse.x; r2.y <- diffuse.y; r2.z <- diffuse.z

#line 59
dp3 r1.w, r0.xyzx, r1.xyzx
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- w.x; r1.y <- w.y; r1.z <- w.z

#line 60
mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- r.x; r0.y <- r.y; r0.z <- r.z

#line 62
mul r1.xyz, cb0[2].wwww, cb0[2].xyzx
mul r1.xyz, r0.wwww, r1.xyzx
mul r1.xyz, r1.xyzx, cb1[0].xxxx
mov r0.xyz, -r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, v0.xyzx, v0.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v0.xyzx
dp3 r0.x, r0.xyzx, r3.xyzx
max r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb1[0].y
exp r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx  // r0.x <- specular.x; r0.y <- specular.y; r0.z <- specular.z

#line 64
add r1.xyz, r2.xyzx, cb0[1].xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t0.xyzw, s0
mul r1.xyz, r1.xyzx, r2.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 75 instruction slots used
