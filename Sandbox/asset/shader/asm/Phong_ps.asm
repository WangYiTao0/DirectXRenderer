//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer LightCBuf
// {
//
//   float3 lightPos;                   // Offset:    0 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LightCBuf                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// Normal                   0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- worldPos.x; v0.y <- worldPos.y; v0.z <- worldPos.z; 
//   v1.x <- n.x; v1.y <- n.y; v1.z <- n.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 7 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Phong_ps.hlsl"
mov r0.xyz, l(0.050000,0.050000,0.050000,0)  // r0.x <- ambient.x; r0.y <- ambient.y; r0.z <- ambient.z

#line 10
mov r0.w, l(1.000000)  // r0.w <- attConst

#line 11
mov r1.x, l(0.045000)  // r1.x <- attLin

#line 12
mov r1.y, l(0.007500)  // r1.y <- attQuad

#line 17
mov r2.xyz, -v0.xyzx
add r2.xyz, r2.xyzx, cb0[0].xyzx  // r2.x <- vToL.x; r2.y <- vToL.y; r2.z <- vToL.z

#line 18
dp3 r1.z, r2.xyzx, r2.xyzx
sqrt r1.z, r1.z  // r1.z <- distToL

#line 19
div r2.xyz, r2.xyzx, r1.zzzz  // r2.x <- dirToL.x; r2.y <- dirToL.y; r2.z <- dirToL.z

#line 21
mul r1.x, r1.z, r1.x
add r0.w, r0.w, r1.x
mul r1.x, r1.z, r1.z
mul r1.x, r1.x, r1.y
add r0.w, r0.w, r1.x
div r0.w, l(1.000000), r0.w  // r0.w <- att

#line 23
mul r1.xyz, r0.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3 r0.w, r2.xyzx, v1.xyzx
max r0.w, r0.w, l(0.000000)
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z

#line 25
add r0.xyz, r0.xyzx, r1.xyzx
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 24 instruction slots used
