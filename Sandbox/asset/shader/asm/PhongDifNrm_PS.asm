//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PointLightCBuf
// {
//
//   float3 viewLightPos;               // Offset:    0 Size:    12
//   float3 ambient;                    // Offset:   16 Size:    12
//   float3 diffuseColor;               // Offset:   32 Size:    12
//   float diffuseIntensity;            // Offset:   44 Size:     4
//   float attConst;                    // Offset:   48 Size:     4
//   float attLin;                      // Offset:   52 Size:     4
//   float attQuad;                     // Offset:   56 Size:     4
//
// }
//
// cbuffer ObjectCBuf
// {
//
//   float3 specularColor;              // Offset:    0 Size:    12
//   float specularWeight;              // Offset:   12 Size:     4
//   float specularGloss;               // Offset:   16 Size:     4
//   bool useNormalMap;                 // Offset:   20 Size:     4
//   float normalMapWeight;             // Offset:   24 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// splr                              sampler      NA          NA             s0      1 
// tex                               texture  float4          2d             t0      1 
// nmap                              texture  float4          2d             t2      1 
// PointLightCBuf                    cbuffer      NA          NA            cb0      1 
// ObjectCBuf                        cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// Normal                   0   xyz         1     NONE   float   xyz 
// Tangent                  0   xyz         2     NONE   float   xyz 
// Bitangent                0   xyz         3     NONE   float   xyz 
// Texcoord                 0   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- viewFragPos.x; v0.y <- viewFragPos.y; v0.z <- viewFragPos.z; 
//   v1.x <- viewNormal.x; v1.y <- viewNormal.y; v1.z <- viewNormal.z; 
//   v2.x <- viewTan.x; v2.y <- viewTan.y; v2.z <- viewTan.z; 
//   v3.x <- viewBitan.x; v3.y <- viewBitan.y; v3.z <- viewBitan.z; 
//   v4.x <- tc.x; v4.y <- tc.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 24 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongDifNrm_PS.hlsl"
dp3 r0.x, v1.xyzx, v1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v1.xyzx  // r0.x <- viewNormal.x; r0.y <- viewNormal.y; r0.z <- viewNormal.z

#line 26
ine r0.w, l(0, 0, 0, 0), cb1[1].y
if_nz r0.w

#line 28
  nop 
  dp3 r0.w, v2.xyzx, v2.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, v2.xyzx
  dp3 r0.w, v3.xyzx, v3.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, v3.xzyx
  nop 
  nop 

#line 10 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Common\ShaderOps.hlsli"
  mov r3.x, r1.x  // r3.x <- tanToTarget._m00
  mov r3.y, r2.x  // r3.y <- tanToTarget._m10
  mov r3.z, r0.x  // r3.z <- tanToTarget._m20
  mov r4.x, r1.y  // r4.x <- tanToTarget._m01
  mov r4.y, r2.z  // r4.y <- tanToTarget._m11
  mov r4.z, r0.y  // r4.z <- tanToTarget._m21
  mov r2.x, r1.z  // r2.x <- tanToTarget._m02
  mov r2.y, r2.y  // r2.y <- tanToTarget._m12
  mov r2.z, r0.z  // r2.z <- tanToTarget._m22

#line 12
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v4.xyxx, t2.xyzw, s0  // r1.x <- normalSample.x; r1.y <- normalSample.y; r1.z <- normalSample.z

#line 13
  mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
  mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
  add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- tanNormal.x; r1.y <- tanNormal.y; r1.z <- tanNormal.z

#line 15
  dp3 r3.x, r1.xyzx, r3.xyzx
  dp3 r3.y, r1.xyzx, r4.xyzx
  dp3 r3.z, r1.xyzx, r2.xyzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r3.xyzx  // r1.x <- <MapNormal return value>.x; r1.y <- <MapNormal return value>.y; r1.z <- <MapNormal return value>.z

#line 28 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongDifNrm_PS.hlsl"
  mov r1.xyz, r1.xyzx  // r1.x <- mappedNormal.x; r1.y <- mappedNormal.y; r1.z <- mappedNormal.z

#line 29
  mov r2.xyz, -r0.xyzx
  add r1.xyz, r1.xyzx, r2.xyzx
  mul r1.xyz, r1.xyzx, cb1[1].zzzz
  add r0.xyz, r0.xyzx, r1.xyzx

#line 30
endif 

#line 32
nop 

#line 11 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Common\LightVectorData.hlsli"
mov r1.xyz, -v0.xyzx
add r1.xyz, r1.xyzx, cb0[0].xyzx  // r1.x <- lv.vToL.x; r1.y <- lv.vToL.y; r1.z <- lv.vToL.z

#line 12
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w  // r0.w <- lv.distToL

#line 13
div r2.xyz, r1.xyzx, r0.wwww  // r2.x <- lv.dirToL.x; r2.y <- lv.dirToL.y; r2.z <- lv.dirToL.z

#line 34 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongDifNrm_PS.hlsl"
nop 
mov r1.w, cb0[3].x
mov r2.w, cb0[3].y
mov r3.x, cb0[3].z

#line 20 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Common\ShaderOps.hlsli"
mul r2.w, r0.w, r2.w
add r1.w, r1.w, r2.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r3.x
add r0.w, r0.w, r1.w
div r0.w, l(1.000000), r0.w  // r0.w <- <Attenuate return value>

#line 36 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongDifNrm_PS.hlsl"
nop 
mov r3.xyz, cb0[2].xyzx
mov r1.w, cb0[2].w

#line 30 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Common\ShaderOps.hlsli"
mul r3.xyz, r1.wwww, r3.xyzx
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r1.w, r2.xyzx, r0.xyzx
max r1.w, r1.w, l(0.000000)
mul r2.xyz, r1.wwww, r3.xyzx  // r2.x <- <Diffuse return value>.x; r2.y <- <Diffuse return value>.y; r2.z <- <Diffuse return value>.z

#line 36 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongDifNrm_PS.hlsl"
mov r2.xyz, r2.xyzx  // r2.x <- diffuse.x; r2.y <- diffuse.y; r2.z <- diffuse.z

#line 38
nop 
mul r3.xyz, cb0[2].wwww, cb0[2].xyzx
mul r3.xyz, r3.xyzx, cb1[0].xyzx
mov r1.w, cb1[0].w

#line 43 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Common\ShaderOps.hlsli"
dp3 r2.w, r1.xyzx, r0.xyzx
mul r0.xyz, r0.xyzx, r2.wwww  // r0.x <- w.x; r0.y <- w.y; r0.z <- w.z

#line 44
mul r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r1.xyz, -r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx  // r0.x <- r.x; r0.y <- r.y; r0.z <- r.z

#line 46
dp3 r1.x, v0.xyzx, v0.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v0.xyzx  // r1.x <- viewCamToFrag.x; r1.y <- viewCamToFrag.y; r1.z <- viewCamToFrag.z

#line 49
mul r3.xyz, r0.wwww, r3.xyzx
mul r3.xyz, r1.wwww, r3.xyzx
mov r0.xyz, -r0.xyzx
dp3 r0.x, r0.xyzx, r1.xyzx
max r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb1[1].x
exp r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xyzx  // r0.x <- <Speculate return value>.x; r0.y <- <Speculate return value>.y; r0.z <- <Speculate return value>.z

#line 38 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\PhongDifNrm_PS.hlsl"
mov r0.xyz, r0.xyzx  // r0.x <- specular.x; r0.y <- specular.y; r0.z <- specular.z

#line 43
add r1.xyz, r2.xyzx, cb0[1].xyzx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t0.xyzw, s0
mul r1.xyz, r1.xyzx, r2.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min o0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 97 instruction slots used
