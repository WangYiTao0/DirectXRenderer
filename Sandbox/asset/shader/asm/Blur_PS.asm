//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// splr                              sampler      NA          NA             s0      1 
// tex                               texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Texcoord                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- uv.x; v0.y <- uv.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 4 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Blur_PS.hlsl"
mov r0.x, l(12)  // r0.x <- r

#line 5
itof r0.y, l(625)  // r0.y <- divisor

#line 10
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.zw, l(0), t0.zwxy
mov r0.z, r0.z  // r0.z <- width
mov r0.w, r0.w  // r0.w <- height

#line 11
utof r0.z, r0.z
div r0.z, l(1.000000), r0.z  // r0.z <- dx

#line 12
utof r0.w, r0.w
div r0.w, l(1.000000), r0.w  // r0.w <- dy

#line 13
mov r1.xyzw, l(0,0,0,0)  // r1.x <- acc.x; r1.y <- acc.y; r1.z <- acc.z; r1.w <- acc.w

#line 14
mov r2.x, l(-12)  // r2.x <- y
mov r3.xyzw, r1.xyzw  // r3.x <- acc.x; r3.y <- acc.y; r3.z <- acc.z; r3.w <- acc.w
mov r2.y, r2.x  // r2.y <- y
loop 
  ige r2.z, r0.x, r2.y
  breakc_z r2.z

#line 16
  mov r2.z, l(-12)  // r2.z <- x
  mov r4.xyzw, r3.xyzw  // r4.x <- acc.x; r4.y <- acc.y; r4.z <- acc.z; r4.w <- acc.w
  mov r2.w, r2.z  // r2.w <- x
  loop 
    ige r5.x, r0.x, r2.w
    breakc_z r5.x

#line 18
    itof r5.x, r2.w
    mul r5.x, r0.z, r5.x
    itof r5.z, r2.y
    mul r5.y, r0.w, r5.z
    add r5.xy, r5.xyxx, v0.xyxx  // r5.x <- tc.x; r5.y <- tc.y

#line 19
    sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t0.xyzw, s0
    add r4.xyzw, r4.xyzw, r5.xyzw

#line 20
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r3.xyzw, r4.xyzw  // r3.x <- acc.x; r3.y <- acc.y; r3.z <- acc.z; r3.w <- acc.w

#line 21
  iadd r2.y, r2.y, l(1)
endloop 

#line 22
div o0.xyzw, r3.xyzw, r0.yyyy
ret 
// Approximately 36 instruction slots used
