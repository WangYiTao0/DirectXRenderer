//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// splr                              sampler      NA          NA             s0      1 
// tex                               texture  float4          2d             t0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Texcoord                 0   xy          0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- uv.x; v0.y <- uv.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 4 "F:\MyRepo\DirectXRenderer\Sandbox\asset\shader\Blur_PS.hlsl"
mov r0.x, l(12)  // r0.x <- r

#line 5
itof r0.y, l(625)  // r0.y <- divisor

#line 10
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.zw, l(0), t0.zwxy
mov r0.z, r0.z  // r0.z <- width
mov r0.w, r0.w  // r0.w <- height

#line 11
utof r0.z, r0.z
div r0.z, l(1.000000), r0.z  // r0.z <- dx

#line 12
utof r0.w, r0.w
div r0.w, l(1.000000), r0.w  // r0.w <- dy

#line 13
mov r1.x, l(0)  // r1.x <- accAlpha

#line 14
mov r1.yzw, l(0,0,0,0)  // r1.y <- maxColor.x; r1.z <- maxColor.y; r1.w <- maxColor.z

#line 15
mov r2.x, l(-12)  // r2.x <- y
mov r2.yzw, r1.yyzw  // r2.y <- maxColor.x; r2.z <- maxColor.y; r2.w <- maxColor.z
mov r3.x, r1.x  // r3.x <- accAlpha
mov r3.y, r2.x  // r3.y <- y
loop 
  ige r3.z, r0.x, r3.y
  breakc_z r3.z

#line 17
  mov r3.z, l(-12)  // r3.z <- x
  mov r4.xyz, r2.yzwy  // r4.x <- maxColor.x; r4.y <- maxColor.y; r4.z <- maxColor.z
  mov r3.w, r3.x  // r3.w <- accAlpha
  mov r4.w, r3.z  // r4.w <- x
  loop 
    ige r5.x, r0.x, r4.w
    breakc_z r5.x

#line 19
    itof r5.x, r4.w
    mul r5.x, r0.z, r5.x
    itof r5.z, r3.y
    mul r5.y, r0.w, r5.z
    add r5.xy, r5.xyxx, v0.xyxx  // r5.x <- tc.x; r5.y <- tc.y

#line 20
    sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t0.xyzw, s0  // r5.x <- s.x; r5.y <- s.y; r5.z <- s.z; r5.w <- s.w

#line 21
    add r3.w, r3.w, r5.w

#line 22
    max r4.xyz, r4.xyzx, r5.xyzx

#line 23
    iadd r4.w, r4.w, l(1)
  endloop 
  mov r2.yzw, r4.xxyz  // r2.y <- maxColor.x; r2.z <- maxColor.y; r2.w <- maxColor.z
  mov r3.x, r3.w  // r3.x <- accAlpha

#line 24
  iadd r3.y, r3.y, l(1)
endloop 

#line 25
div o0.w, r3.x, r0.y
mov o0.xyz, r2.yzwy
ret 
// Approximately 42 instruction slots used
